"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const crypto_1 = require("crypto");
const net_1 = require("net");
const path_1 = require("path");
const middleware_1 = require("./middleware");
const LineWrapper = require('stream-line-wrapper');
class Engine {
    constructor(config) {
        this.middlewareParams = new middleware_1.MiddlewareParams();
        this.middlewareParams.prefix = config.endpoint || '/graphql';
        this.middlewareParams.psk = crypto_1.randomBytes(48).toString("hex");
        this.middlewareParams.dumpTraffic = config.dumpTraffic || false;
        if (config.graphqlPort) {
            this.graphqlPort = config.graphqlPort;
        }
        else {
            const port = process.env.PORT;
            if (port) {
                this.graphqlPort = parseInt(port, 10);
            }
            else {
                throw new Error('process.env.PORT is not set!');
            }
        }
        this.config = config.engineConfig;
        switch (process.platform) {
            case 'darwin': {
                this.binary = 'engineproxy_darwin_amd64';
                break;
            }
            case 'linux': {
                this.binary = 'engineproxy_linux_amd64';
                break;
            }
            case 'win32': {
                this.binary = 'engineproxy_windows_amd64.exe';
                break;
            }
            default: {
                throw new Error('Unsupported platform');
            }
        }
    }
    start() {
        const config = this.config;
        const endpoint = this.middlewareParams.prefix;
        const graphqlPort = this.graphqlPort;
        // Allocate a random port for the proxy:
        const srv = net_1.createServer();
        return new Promise(resultPort => {
            srv.on('listening', () => {
                const port = srv.address().port;
                srv.close();
                this.middlewareParams.uri = 'http://127.0.0.1:' + port;
                const binaryPath = path_1.resolve(__dirname, '../bin', this.binary);
                let child = this.child;
                if (typeof config === 'string') {
                    const env = Object.assign({ 'ENGINE_CONFIG': port + ',' + endpoint + ',' + graphqlPort + ',' + this.middlewareParams.psk }, process.env);
                    child = child_process_1.execFile(binaryPath, ['-config=' + config, '-sload=true', '-restart=true'], { 'env': env }, (err) => {
                        if (err)
                            console.error(err);
                    });
                    child.stdout.pipe(this.engineLineWrapper()).pipe(process.stdout);
                    child.stderr.pipe(this.engineLineWrapper()).pipe(process.stderr);
                    child.on('exit', () => {
                        if (child != null) {
                            throw new Error('Engine crashed unexpectedly');
                        }
                    });
                }
                else {
                    const sideloadConfig = JSON.parse(JSON.stringify(config));
                    sideloadConfig.frontends = [{
                            'host': '127.0.0.1',
                            'endpoint': endpoint,
                            'port': port
                        }];
                    sideloadConfig.origins = [{
                            url: 'http://127.0.0.1:' + graphqlPort + endpoint,
                            headerSecret: this.middlewareParams.psk
                        }];
                    const env = { 'env': Object.assign({ 'ENGINE_CONFIG': JSON.stringify(sideloadConfig) }, process.env) };
                    child = child_process_1.execFile(binaryPath, ['-config=env', '-restart=true'], env);
                    child.stdout.pipe(this.engineLineWrapper()).pipe(process.stdout);
                    child.stderr.pipe(this.engineLineWrapper()).pipe(process.stderr);
                    child.on('exit', () => {
                        if (child != null) {
                            throw new Error('Engine crashed unexpectedly');
                        }
                    });
                }
                resultPort(port);
            }).listen(0);
        });
    }
    engineLineWrapper() {
        return new LineWrapper({ prefix: 'EngineProxy ==> ' });
    }
    expressMiddleware() {
        return middleware_1.makeExpressMiddleware(this.middlewareParams);
    }
    connectMiddleware() {
        return middleware_1.makeConnectMiddleware(this.middlewareParams);
    }
    koaMiddleware() {
        return middleware_1.makeKoaMiddleware(this.middlewareParams);
    }
    instrumentHapiServer(server) {
        middleware_1.instrumentHapi(server, this.middlewareParams);
    }
    stop() {
        if (this.child == null) {
            throw new Error('No engine instance running...');
        }
        const childRef = this.child;
        this.child = null;
        childRef.kill();
    }
}
exports.Engine = Engine;
//# sourceMappingURL=index.js.map