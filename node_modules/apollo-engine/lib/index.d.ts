export declare type LogLevels = 'debug' | 'info' | 'warn' | 'error' | 'fatal';
export interface EngineConfig {
    apiKey: string;
    reporting?: {
        endpointUrl?: string;
    };
    logcfg?: {
        level: LogLevels;
    };
    stores?: [{
        name: string;
        epoch?: number;
        timeout?: string;
        memcaches: [{
            url: string;
        }];
    }];
    operations?: [{
        signature: string;
        perSession?: boolean;
        caches: [{
            ttl: number;
            store: string;
        }];
    }];
    sessionAuth?: {
        header: string;
        store?: string;
        tokenAuthUrl?: string;
    };
}
export interface SideloadConfig {
    engineConfig: string | EngineConfig;
    endpoint?: string;
    graphqlPort?: number;
    dumpTraffic?: boolean;
}
export declare class Engine {
    private child;
    private graphqlPort;
    private binary;
    private config;
    private middlewareParams;
    constructor(config: SideloadConfig);
    start(): Promise<number>;
    private engineLineWrapper();
    expressMiddleware(): (req: any, res: any, next: any) => void;
    connectMiddleware(): (req: any, res: any, next: any) => void;
    koaMiddleware(): (ctx: any, next: any) => void;
    instrumentHapiServer(server: any): void;
    stop(): void;
}
