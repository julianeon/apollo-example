const http = require('http');
const express = require('express');
const {graphqlExpress} = require('apollo-server-express');
const bodyParser = require('body-parser');
const request = require('request');
const {assert} = require('chai');

const {Engine} = require('../lib/index');
const {schema, rootValue, verifyEndpointSuccess, verifyEndpointFailure, verifyEndpointError} = require('./schema');

describe('express middleware', () => {
  // Start graphql-express on a random port:
  let app;
  beforeEach(() => {
    app = express();
  });

  function gqlServer(path) {
    path = path || '/graphql';
    app.use(path, bodyParser.json(), graphqlExpress({
      schema: schema,
      rootValue: rootValue,
      tracing: true
    }));
    return http.createServer(app).listen().address().port;
  }

  describe('without engine', () => {
    let url;
    beforeEach(() => {
      port = gqlServer();
      url = `http://localhost:${port}/graphql`;
    });

    it('processes successful query', (done) => {
      verifyEndpointSuccess(url, true, done);
    });
    it('processes invalid query', (done) => {
      verifyEndpointFailure(url, done);
    });
    it('processes query that errors', (done) => {
      verifyEndpointError(url, done);
    });
  });

  describe('with engine', () => {
    // Configure engine middleware:
    let engine;
    let url;
    beforeEach(() => {
      engine = new Engine({engineConfig: {}, graphqlPort: 1});
      // Install middleware before GraphQL handler:
      app.use(engine.expressMiddleware());
      let port = gqlServer();
      engine.graphqlPort = port;
      url = `http://localhost:${port}/graphql`;
    });

    describe('unstarted engine', () => {
      it('processes successful query', (done) => {
        verifyEndpointSuccess(url, true, done);
      });
      it('processes invalid query', (done) => {
        verifyEndpointFailure(url, done);
      });
      it('processes query that errors', (done) => {
        verifyEndpointError(url, done);
      });
    });

    describe('engine started', () => {
      // Start engine middleware (i.e. spawn proxy)
      beforeEach((done) => {
        engine.start().then(() => {
          // Really ugly, but delay for proxy process to spawn+bind:
          setTimeout(done, 100);
        });
      });
      it('processes successful query', (done) => {
        verifyEndpointSuccess(url, false, done);
      });
      it('processes invalid query', (done) => {
        verifyEndpointFailure(url, done);
      });
      it('processes query that errors', (done) => {
        verifyEndpointError(url, done);
      });
    });
  });

  describe('at root path', () => {
    it('is routed through proxy', (done) => {
      // Install middleware before GraphQL handler:
      let engine = new Engine({
        endpoint: '/',
        engineConfig: {},
        graphqlPort: 1
      });
      app.use(engine.expressMiddleware());

      let port = gqlServer('/');
      engine.graphqlPort = port;
      engine.start().then(() => {
        // Really ugly, but delay for proxy process to spawn+bind:
        setTimeout(() => {
          let url = `http://localhost:${port}/`;
          verifyEndpointSuccess(url, false, done);
        }, 100);
      });
    });
  });
});
